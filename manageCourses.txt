import React, { useState, useEffect } from "react";
import axios from "axios";
import AddCourse from "./AddCourse";

const ManageCourses = () => {
  const [courses, setCourses] = useState([]);
  const [skills, setSkills] = useState([]);
  const [employees, setEmployees] = useState([]);

  // States for creating/updating a course
  const [newCourse, setNewCourse] = useState({
    title: "",
    difficulty_level: "Easy",
    no_of_chapters: 0,
    duration: 0,
    skills: []
  });

  const [editCourseId, setEditCourseId] = useState(null);

  // Fetch courses, skills, and employees data
  useEffect(() => {
    fetchCourses();
    fetchSkills();
    fetchEmployees();
    fetchCoursesAndSkills();
  }, []);

  const fetchCourses = async () => {
    try {
      const response = await axios.get("http://localhost:1200/admin/courses");
      setCourses(response.data);
    } catch (error) {
      console.error("Error fetching courses:", error);
    }
  };

  const fetchSkills = async () => {
    try {
      const response = await axios.get("http://localhost:1200/admin/skills");
      setSkills(response.data);
    } catch (error) {
      console.error("Error fetching skills:", error);
    }
  };
  const fetchCoursesAndSkills = async () => {
    try {

      const coursesResponse = await axios.get("http://localhost:1200/admin/courses");
      const skillsResponse = await axios.get("http://localhost:1200/admin/skills")

      const courses = coursesResponse.data;
      const skills = skillsResponse.data;
  
      // Create a mapping of skill IDs to skill names
      const skillIdToNameMap = {};
      skills.forEach(skill => {
        skillIdToNameMap[skill.id] = skill.name;
      });
  
      // Map courses to include skill names instead of IDs
      const coursesWithSkillNames = courses.map(course => ({
        ...course,
        skills: course.skills.map(skillId => skillIdToNameMap[skillId]) // Replace IDs with names
      }));
  
      setCourses(coursesWithSkillNames);
    } catch (error) {
      console.error("Error fetching courses:", error);
    }
  };
  
  const fetchEmployees = async () => {
    try {
      const response = await axios.get("http://localhost:1200/admin/employees");
      setEmployees(response.data);
    } catch (error) {
      console.error("Error fetching employees:", error);
    }
  };

  // Handle course form submission
  // const handleCourseSubmit = async (e) => {
  //   e.preventDefault();
  //   try {
  //     if (editCourseId) {
  //       await axios.put(`/admin/courses/${editCourseId}`, newCourse);
  //     } else {
  //       await axios.post("/admin/courses", newCourse);
  //     }
  //     fetchCourses();
  //     resetCourseForm();
  //   } catch (error) {
  //     console.error("Error adding/updating course:", error);
  //   }
  // };

  // const resetCourseForm = () => {
  //   setNewCourse({
  //     title: "",
  //     difficulty_level: "Easy",
  //     no_of_chapters: 0,
  //     duration: 0,
  //     skills: []
  //   });
  //   setEditCourseId(null);
  // };

  const handleEditCourse = (course) => {
    setEditCourseId(course.id);
    setNewCourse({
      title: course.title,
      difficulty_level: course.difficulty_level,
      no_of_chapters: course.no_of_chapters,
      duration: course.duration,
      skills: course.skills.map(skill => skill.id)
    });
  };

  const handleAssignCourse = async (courseId, userId) => {
    try {
      await axios.post("/admin/assign-course", { courseId, userId });
      alert("Course assigned successfully");
    } catch (error) {
      console.error("Error assigning course:", error);
    }
  };

  return (
    <div className="container mt-5">
      <h2>Manage Courses</h2>
      <AddCourse />

      <h3 className="mt-5">Courses List</h3>
      <table className="table">
        <thead>
          <tr>
            <th>Title</th>
            <th>Difficulty</th>
            <th>Chapters</th>
            <th>Duration</th>
            <th>Skills</th> {/* Add a column for Skills */}
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {courses.map(course => (
            <tr key={course.id}>
              <td>{course.title}</td>
              <td>{course.difficulty_level}</td>
              <td>{course.no_of_chapters}</td>
              <td>{course.duration}</td>
              <td>{course.skills.join(', ')}</td> {/* Display skill names */}
              <td>
                <button onClick={() => handleEditCourse(course)} className="btn btn-warning">Edit</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      <h3 className="mt-5">Assign Course to Employee</h3>
      <form>
        <div className="form-group">
          <label>Select Course</label>
          <select className="form-control" id="courseId">
            {courses.map(course => (
              <option key={course.id} value={course.id}>{course.title}</option>
            ))}
          </select>
        </div>
        <div className="form-group">
          <label>Select Employee</label>
          <select className="form-control" id="userId">
            {employees.map(employee => (
              <option key={employee.userId} value={employee.userId}>{employee.name}</option>
            ))}
          </select>
        </div>
        <button
          type="button"
          className="btn btn-primary"
          onClick={() =>
            handleAssignCourse(
              document.getElementById("courseId").value,
              document.getElementById("userId").value
            )
          }
        >
          Assign Course
        </button>
      </form>
    </div>
  );
};

export default ManageCourses;
